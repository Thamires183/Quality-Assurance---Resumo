# -*- coding: utf-8 -*-
"""Thamires_Marçal_ProjetoQA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VQuG9dWDQJTa7Tue5G75HW9059pklhVU

# **TESTE CÓDIGO UNITÁRIO**
"""

import hashlib

# Dicionário para armazenar usuários (email como chave)
usuarios = {}

def cadastrar_usuario(nome, email, senha):
    if email in usuarios:
        return "Erro: E-mail já cadastrado!"

    # Armazena a senha como um hash para maior segurança
    senha_hash = hashlib.sha256(senha.encode()).hexdigest()
    usuarios[email] = {'nome': nome, 'senha': senha_hash}
    return "Usuário cadastrado com sucesso!"

# Teste Unitário Melhorado
def test_cadastro_usuario():
    global usuarios
    usuarios = {}  # Resetar a base de usuários antes do teste

    # Teste de cadastro válido
    assert cadastrar_usuario("João", "joao@email.com", "1234") == "Usuário cadastrado com sucesso!"
    assert len(usuarios) == 1

    # Teste de cadastro com e-mail duplicado
    assert cadastrar_usuario("João", "joao@email.com", "4321") == "Erro: E-mail já cadastrado!"
    assert len(usuarios) == 1  # Continua com apenas um usuário

    print("Teste unitário de cadastro de usuário passou!")

# Executa o teste
test_cadastro_usuario()

"""# **TESTE DE INTEGRAÇÃO**"""

import hashlib

# Banco de dados de usuários
usuarios = {}

# Função de cadastro aprimorada
def cadastrar_usuario(nome, email, senha):
    if email in usuarios:
        return "Erro: E-mail já cadastrado!"

    senha_hash = hashlib.sha256(senha.encode()).hexdigest()  # Hash da senha
    usuarios[email] = {'nome': nome, 'senha': senha_hash}
    return "Usuário cadastrado com sucesso!"

# Função de login aprimorada
def login_usuario(email, senha):
    senha_hash = hashlib.sha256(senha.encode()).hexdigest()  # Hash da senha de entrada
    if email in usuarios and usuarios[email]['senha'] == senha_hash:
        return "Login bem-sucedido"
    return "Falha no login"

# Teste de Integração Melhorado
def test_integracao_login():
    global usuarios
    usuarios = {}  # Resetar usuários antes do teste

    # Cadastra um usuário antes de testar o login
    cadastrar_usuario("João", "joao@email.com", "1234")

    # Teste de login bem-sucedido
    assert login_usuario("joao@email.com", "1234") == "Login bem-sucedido"

    # Teste de login com senha errada
    assert login_usuario("joao@email.com", "senhaerrada") == "Falha no login"

    # Teste de login com e-mail inexistente
    assert login_usuario("inexistente@email.com", "1234") == "Falha no login"

    print("Teste de integração entre cadastro e login passou!")

# Executa o teste
test_integracao_login()

"""# **Teste de Sistema**"""

# Sistema de Carrinho de Compras

# Sistema simples de carrinho de compras
# Sistema de Carrinho de Compras Melhorado

class CarrinhoDeCompras:
    def __init__(self):
        # Inicia o carrinho vazio
        self.itens = {}

    def adicionar_item(self, item, preco):
        # Adiciona um item ao carrinho com seu preço
        if item in self.itens:
            self.itens[item]["quantidade"] += 1
        else:
            self.itens[item] = {"quantidade": 1, "preco": preco}

    def remover_item(self, item):
        # Remove um item do carrinho
        if item in self.itens:
            if self.itens[item]["quantidade"] > 1:
                self.itens[item]["quantidade"] -= 1
            else:
                del self.itens[item]

    def total_itens(self):
        # Retorna o total de itens no carrinho
        return sum(item["quantidade"] for item in self.itens.values())

    def calcular_total(self):
        # Retorna o preço total do carrinho
        return sum(item["quantidade"] * item["preco"] for item in self.itens.values())

# Teste de sistema atualizado
def test_sistema():
    carrinho = CarrinhoDeCompras()

    # Adiciona itens ao carrinho
    carrinho.adicionar_item("Produto 1", 10.0)
    carrinho.adicionar_item("Produto 2", 20.0)
    carrinho.adicionar_item("Produto 1", 10.0)  # Adiciona um item repetido

    # Verifica se o total de itens é 3
    assert carrinho.total_itens() == 3

    # Remove um item
    carrinho.remover_item("Produto 1")

    # Verifica se o total de itens agora é 2
    assert carrinho.total_itens() == 2

    # Verifica o cálculo do valor total
    assert carrinho.calcular_total() == 30.0  # Produto 1 (10) + Produto 2 (20)

    print("Teste de sistema com melhorias passou!")

# Executa o teste
test_sistema()

"""# **Teste de Aceitação**"""

# Sistema de Autenticação

def acessar_sistema(usuario, senha):
    # Banco de dados de usuários fictício
    usuarios_validos = {
        "admin": "1234",
        "user": "abcd"
    }

    # Verifica se as credenciais estão corretas
    if usuario in usuarios_validos and usuarios_validos[usuario] == senha:
        return "Acesso Autorizado"
    else:
        return "Acesso Negado"

# Teste de aceitação atualizado
def test_aceitacao():
    # Testa credenciais corretas
    resultado = acessar_sistema("admin", "1234")
    assert resultado == "Acesso Autorizado"

    # Testa credenciais incorretas
    resultado = acessar_sistema("admin", "0000")
    assert resultado == "Acesso Negado"

    resultado = acessar_sistema("user", "abcd")
    assert resultado == "Acesso Autorizado"

    resultado = acessar_sistema("user", "wrongpass")
    assert resultado == "Acesso Negado"

    resultado = acessar_sistema("inexistente", "senha")
    assert resultado == "Acesso Negado"

    print("Teste de aceitação com melhorias passou!")

# Executa o teste
test_aceitacao()

"""# **TESTE DE REGRESSÃO**"""

# Função de soma aprimorada
def soma(a, b):
    return a + b

# Teste de Regressão atualizado
def test_regressao():
    # Testes básicos
    assert soma(10, 20) == 30
    assert soma(-5, 5) == 0
    assert soma(0, 0) == 0

    # Teste com números negativos
    assert soma(-10, -20) == -30

    # Teste com números de ponto flutuante
    assert soma(1.5, 2.5) == 4.0

    print("Teste de Regressão com melhorias passou!")

# Executa o teste
test_regressao()